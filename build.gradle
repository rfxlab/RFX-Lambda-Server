apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.8
group 'rfx'
version = '0.1'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
    	url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    compile(
            // common
              'io.netty:netty-all:4.1.9.Final'                        
            , 'com.typesafe.akka:akka-actor_2.11:2.5.0'
            , 'com.google.code.gson:gson:2.8.0'
            , 'log4j:log4j:1.2.17'          
            , 'org.apache.commons:commons-lang3:3.3.2'
            , 'commons-net:commons-net:3.3'
            , 'commons-io:commons-io:2.4'
            , 'redis.clients:jedis:2.9.0'
            , 'org.apache.httpcomponents:httpclient:4.5.3'
            , 'org.yaml:snakeyaml:1.14'
            , 'com.google.guava:guava:21.0'
            , 'com.corundumstudio.socketio:netty-socketio:1.7.12' 
            
    )
    testCompile group: 'junit', name: 'junit', version: '4.12'
}


def getClasspathStringJars() {
	def baseFolder = 'deps/'
    def fileNames = []
    configurations.compile.each { File file -> fileNames.add(baseFolder + file.name) }
    
    def classpath = fileNames.join(" ; ")    
    return '. ; ' + classpath + ' ; '
}

// copy libs
task copyRuntimeLibs(type: Copy) {  
  into "build/libs/deps"  
  from configurations.compile  
}

// copy config
task copyConfigs(type: Copy) {  
  into "build/libs/configs"  
  from files('configs')
}

task buildMainJar(type: Jar) {	
	dependsOn classes   
    from(sourceSets.main.output) {
        include "**"
    }    
    baseName = 'rfx-lambda-http-server'
    manifest {
   		attributes ('Implementation-Title': 'LambdaHttpServer', 
        			'Implementation-Version': version ,
        			'Main-Class': 'rfx.server.lambda.LambdaHttpServer',
        			'Class-Path' : getClasspathStringJars() 
        			)
	}
}
